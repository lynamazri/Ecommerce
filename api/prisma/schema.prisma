generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users{
  userId String @id @default(uuid())
   username        String @unique      
  firstName      String
  lastName      String
  email     String    @unique
  password  String
  birthDate DateTime @db.Date
  gender String
adresses Address[]
  registrationDate DateTime  @default(now())
  refreshToken String?
store UserStore[]
reviews Reviews[]
questions Questions[]
}


model Address{
  id       String  @id @default(uuid())
  user   Users @relation(fields: [userId], references: [userId])
  userId String
  street String
  city String
  state String
  zip Int
}

model Store{
  storeId String @id @default(uuid())
name String
description String
phone Int
email String @unique
openingDate DateTime  @default(now())
owners UserStore[]
banner StoreImage[]
products Product[]
approved Boolean @default(false)
}

model UserStore{
  id       String  @id @default(uuid())
user       Users     @relation(fields: [userId], references: [userId])
  userId     String @unique
  store   Store @relation(fields: [storeId], references: [storeId], onDelete: Cascade)
  storeId String 

}


model Product{
  productId String @id @default(uuid())
  name String
  description String @db.VarChar(500)
  price Int
  quantity Int
  subCat   SubCat @relation(fields: [subCatId], references: [subCatId])
  subCatId Int
  images           ProductImage[]
  options ProductOptions[]
  reviews Reviews[]
  questions Questions[]
  store   Store @relation(fields: [storeId], references: [storeId], onDelete: Cascade)
  storeId String
  verified Boolean @default(false)
  dateAdded DateTime  @default(now())
}


model Category {
  catId             Int              @id @default(autoincrement())
  name            String @unique
  description    String @db.VarChar(500)
  subCats SubCat[]
}

model SubCat {
  subCatId          Int       @id @default(autoincrement())
  name         String @unique
  catId Int
  category   Category @relation(fields: [catId], references: [catId], onDelete: Cascade)
  products    Product[]
}


model ProductImage {
  prodImgId        Int     @id @default(autoincrement())
  url String @db.VarChar(500)
  product   Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
  productId String
}


model StoreImage {
  storeImgId        Int     @id @default(autoincrement())
  url String @db.VarChar(500)
  store   Store @relation(fields: [storeId], references: [storeId], onDelete: Cascade)
  storeId String
}

model ProductOptions {
  optionId Int @id @default(autoincrement())
  option String
  product   Product @relation(fields: [productId], references: [productId])
  productId String
   OptionValue   OptionValue     @relation(fields: [valueId], references: [valueId])
  valueId Int
}

model OptionValue {
  valueId        Int       @id @default(autoincrement())
  value      String
  options ProductOptions[]
}

model Reviews {
  reviewId Int @id @default(autoincrement())
  posted DateTime @default(now())
  stars Int 
  content String @db.VarChar(500)
  userId String
  user   Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
}

model Questions {
   questionId Int @id @default(autoincrement())
  posted DateTime @default(now()) 
  content String @db.VarChar(500)
  answer String? @db.VarChar(500)
  userId String
  user   Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
}